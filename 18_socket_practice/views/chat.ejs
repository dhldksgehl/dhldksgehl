<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>채팅 프로그램</title>
  <link rel="stylesheet" type="text/css" href="/static/css/chat.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css">
  <!-- socket.io CDN -->
  <script src="https://cdn.socket.io/4.5.3/socket.io.min.js"
    integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous">
  </script>
  <!-- jQuery CDN -->
  <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>

</head>

<body>
  <h1>Socket.io</h1>

  <!-- [실습 44-2] 채팅창 입장 문구 안내 socket.it -> nickname -->
  <div class="entry-box">
    <input type="text" id="nickname" placeholder="사용할 닉네임을 입력해주세요." autofocus>
    <button type="button" onclick="entry()">입장</button>
  </div>

  <!-- [실습 43] 채팅창 UI 만들기 -->
  <div class="chat-box d-none">
    <div id="chat-list" class="chat-list">
      <!-- [실습 43] 임시데이터 -->
      <!-- <div class="my-chat">
        <div>user1: msg1</div>
      </div>
      <div class="other-chat">
        <div>user2: msg2</div>
      </div>
      <div class="notice">xx가 입장했습니다</div> -->
    </div>
    <div class="send">
      <select id="nick-list">
        <!-- <option value="all">전체</option>
        <option value="socketId1">nick1</option>
        <option value="socketId2">nick2</option> -->
      </select>
      <span>에게</span>
      <input type="text" id="message">
      <button type="button" onclick="send();"><i class="fas fa-arrow-right"></i></button>
    </div>
  </div>

  <script>
    let socket = io.connect(); // socket 사용을 위한 객체 생성
    let myNick; // 내 닉네임 설정

    socket.on('connect', () => {
      console.log('**** ⭕ Client Socket Connected >>', socket.id);
    });

    // [실습 44] 채팅창 입장 안내 문구
    // notice 이벤트를 받아서 공지 문구를 출력
    socket.on('notice', (msg) => {
      console.log('socket on notice >> ', msg)

      document.querySelector('#chat-list').insertAdjacentHTML('beforeend',
        `<div class="notice">${msg}</div>`);
    });

    // [실습 44-2] 채팅창 입장 안내 문구 socket.id -> nickname
    function entry() {
      // console.log(document.querySelector('#nickname').value);
      socket.emit('setNick', document.querySelector('#nickname').value);
    };

    socket.on('entrySuccess', (nick) => {
      myNick = nick;

      // 입력창 비활성화
      document.querySelector('#nickname').disabled = true;
      // [입장] 버튼 비활성화
      document.querySelector('.entry-box > button').disabled = true;
      // 채팅 박스를 보여줌
      document.querySelector('.chat-box').classList.remove('d-none');
    });

    // 'error' 이벤트 받기 -> on
    // alert() 메세지 출력
    socket.on('error', (data) => {
      alert(data);
    });

    // [실습 45] 채팅창 메세지 전송 step1
    // "send" 이벤트 전송하기
    function send() {
      const data = {
        myNick: myNick, // "entrySuccess" 이벤트에서 입장 성공시 설정하는 내 닉네임
        dm: document.querySelector('#nick-list').value, // 현재 선택된 select 태그의 option 값
        msg: document.querySelector('#message').value,
      };
      socket.emit('send', data);
    }

    // [실습 45] 채팅창 메세지 전송 step2
    // "newMessage" 이벤트를 전달받기 { 닉네임 : 메세지내용 }
    // data => {nick: 'a', msg : 'hello'}
    socket.on('newMessage', (data) => {
      console.log('Socket on newMessage >>', data);

      // 생성해야할 채팅 html 구조
      // <div class="my-chat">
      //   <div>user1: msg1</div>
      // </div>
      // <div class="other-chat">
      //   <div>user2: msg2</div>
      // </div>
      // <div class="notice">xx가 입장했습니다</div>
      let chatList = document.querySelector('#chat-list'); // #chat-list 선택
      let div = document.createElement('div'); // .my-chat or .other-chat 생성
      // <div></div>
      let divChat = document.createElement('div'); // 가장 안쪽 div (메세지 박스) 생성
      // <div></div>

      // 새 메세지 (data => { nick: 'a', msg: 'hello' })가 도착했는데
      // myNick에 저장된 현재 내 닉네임과
      // 새 메세지(data)의 nick이 같다면, 내가 보낸 채팅
      // 새 메세지(data)의 nick이 다르면, 상대방이 보낸 채팅
      if (myNick == data.nick) {
        div.classList.add('my-chat'); // <div class="my-chat"></div>
      } else {
        div.classList.add('other-chat'); // <div class='other-chat'></div>
      }

      // [실습 46] DM 기능 추가
      console.log('send data check >> !!!!', data);
      // 전체: { nick : 'a', msg:'xx' }
      // dm: { nick : 'a', msg: 'xx', dm: '(속닥속닥)'}
      if(data.dm){
        div.classList.add('secret-chat');
        divChat.textContent = data.dm // (속닥속닥) 글자 추가
      }else {
        divChat.textContent = `${data.nick} : ${data.msg}`; // <div>(속닥속닥)nick : msg</div>
        div.append(divChat);
        chatList.append(div);
      }
    });

    // [실습 46] DM 기능 추가
    socket.on('updateNicks', (nickArray) => {
      console.log('socket on updateNicks >> ', nickArray);

      // 미션!!!
      // 유저 목록 하나하나를 option 태그로 만들어서 select에 추가
      // select 태그 내부에 추가되어야 할 코드 형식
      // <option value="all">전체</option>
      // <option value="socketId1">nick1</option>
      // <option value="socketId2">nick2</option>
      let options = `<option value="all">전체</option>`; // 모든 option 태그들 저장 할 변수 

      // 1. 반복문 사용해서 option 태그 하나하나 완성
      for (const key in nickArray) {
        
        console.log(nickArray, nickArray[key]);
        
        // options = options + `<option value="${key}">${nickArray[key]}</option>` // x = x + 1
        options += `<option value="${key}">${nickArray[key]}</option>` // x += 1
      };

      // 2. select 태그에 option 태그들을 추가
      // select태그.innerHTML = options;
      document.querySelector('#nick-list').innerHTML = options;
    });

    // opacity
    var chatBox = $('.chat-box');
    chatBox.animate({opacity:"0"}, 500);
    chatBox.animate({opacity:"1"}, 1000)


  </script>
</body>

</html>